{"version":3,"sources":["components/FormContact/FormContact.js","components/Filter/Filter.js","components/ListContact/ContactListItem/ContactListItem.js","components/ListContact/ListContact.js","App.js","index.js"],"names":["FormContact","state","name","number","handleInputChange","e","setState","target","value","onAddContact","preventDefault","props","addContact","onSubmit","this","type","onChange","pattern","title","required","Component","Filter","onFilter","ContactListItem","contact","deleteContact","id","onClick","ListContact","contacts","map","App","filter","find","alert","uuidv4","localStorage","setItem","JSON","stringify","contactIndex","findIndex","splice","filteredArray","filterBy","toLowerCase","includes","savedContacts","getItem","parse","error","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a7dc9799.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\n\nclass FormContact extends Component {\n  state = {\n    name: \"\",\n    number: \"\",\n  };\n\n  handleInputChange = (e) => {\n    this.setState({ [e.target.name]: e.target.value });\n  };\n\n  onAddContact = (e) => {\n    e.preventDefault();\n    this.props.addContact(this.state.name, this.state.number);\n    this.setState({ name: \"\", number: \"\" });\n  };\n  render() {\n    return (\n      <form onSubmit={this.onAddContact}>\n        <label>\n          Name\n          <input\n            type=\"text\"\n            name=\"name\"\n            value={this.state.name}\n            onChange={this.handleInputChange}\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n            required\n          />\n        </label>\n        <label>\n          Number\n          <input\n            type=\"tel\"\n            name=\"number\"\n            value={this.state.number}\n            onChange={this.handleInputChange}\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n            required\n          />\n        </label>\n        <button type=\"submit\">Add contact</button>\n      </form>\n    );\n  }\n}\n\nFormContact.propTypes = {\n  addContact: PropTypes.func,\n};\n\nexport default FormContact;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst Filter = ({ onFilter, value }) => {\n  return (\n    <>\n      <label>\n        Find contacts by name\n        <input\n          type=\"text\"\n          name=\"keyword\"\n          value={value}\n          onChange={(e) => onFilter(e.target.value)}\n        />\n      </label>\n    </>\n  );\n};\n\nFilter.propTypes = {\n  onFilter: PropTypes.func.isRequired,\n  value: PropTypes.string.isRequired,\n};\n\nexport default Filter;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst ContactListItem = ({ contact, deleteContact }) => {\n  const { id, name, number } = contact;\n  return (\n    <li>\n      {name} {number}\n      <button onClick={() => deleteContact(id)}>Delete</button>\n    </li>\n  );\n};\n\nContactListItem.propTypes = {\n  contact: PropTypes.shape({\n    id: PropTypes.string,\n    name: PropTypes.string,\n    number: PropTypes.string,\n  }),\n  deleteContact: PropTypes.func.isRequired,\n};\n\nexport default ContactListItem;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport ContactListItem from \"./ContactListItem/ContactListItem\";\n\nconst ListContact = ({ contacts, deleteContact }) => {\n  return (\n    <ul>\n      {contacts.map((contact) => (\n        <ContactListItem\n          contact={contact}\n          key={contact.id}\n          deleteContact={deleteContact}\n        />\n      ))}\n    </ul>\n  );\n};\n\nListContact.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string,\n      name: PropTypes.string,\n      number: PropTypes.string,\n    })\n  ).isRequired,\n  deleteContact: PropTypes.func.isRequired,\n};\n\nexport default ListContact;\n","import React, { Component } from \"react\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport FormContact from \"./components/FormContact/FormContact\";\nimport Filter from \"./components/Filter/Filter\";\nimport ListContact from \"./components/ListContact/ListContact\";\n\nclass App extends Component {\n  state = {\n    contacts: [\n      { id: \"id-1\", name: \"Rosie Simpson\", number: \"459-12-56\" },\n      { id: \"id-2\", name: \"Hermione Kline\", number: \"443-89-12\" },\n      { id: \"id-3\", name: \"Eden Clements\", number: \"645-17-79\" },\n      { id: \"id-4\", name: \"Annie Copeland\", number: \"227-91-26\" },\n    ],\n    filter: \"\",\n  };\n\n  componentDidMount() {\n    try {\n      const savedContacts = localStorage.getItem(\"contacts\");\n      if (savedContacts) {\n        this.setState({ contacts: JSON.parse(savedContacts) });\n      }\n    } catch (error) {}\n  }\n  componentDidUpdate() {}\n\n  addContact = (name, number) => {\n    const sameContact = this.state.contacts.find(\n      (contact) => contact.name === name\n    );\n    if (sameContact) {\n      alert(`${name} is already in contacts`);\n      return;\n    }\n    const contacts = [...this.state.contacts, { id: uuidv4(), name, number }];\n    this.setState({\n      contacts,\n    });\n    localStorage.setItem(\"contacts\", JSON.stringify(contacts));\n  };\n\n  deleteContact = (id) => {\n    const contactIndex = this.state.contacts.findIndex(\n      ({ id: contactId }) => contactId === id\n    );\n    const contacts = [...this.state.contacts];\n    contacts.splice(contactIndex, 1);\n    this.setState({ contacts });\n    localStorage.setItem(\"contacts\", JSON.stringify(contacts));\n  };\n\n  onFilter = (value) => {\n    this.setState({ filter: value });\n  };\n\n  filteredArray = () => {\n    const filterBy = this.state.filter.toLowerCase();\n    return this.state.filter\n      ? this.state.contacts.filter((contact) =>\n          contact.name.toLowerCase().includes(filterBy)\n        )\n      : this.state.contacts;\n  };\n\n  render() {\n    return (\n      <>\n        <h2>Phonebook</h2>\n        <FormContact addContact={this.addContact} />\n        <h2>Contacts</h2>\n        <Filter onFilter={this.onFilter} value={this.state.filter} />\n        <ListContact\n          contacts={this.filteredArray(this.state.contacts)}\n          deleteContact={this.deleteContact}\n        />\n      </>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}